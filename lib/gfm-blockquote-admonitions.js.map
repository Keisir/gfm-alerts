{"version":3,"file":"gfm-blockquote-admonitions.js","sources":["../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/color.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../src/config.ts","../src/remark-gfm-blockquote-admonitions/index.ts","../src/gfm-blockquote-admonitions.ts"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","export interface Config {\r\n    blockCssClass: string;\r\n    titleCssClass: string;\r\n    types: Record<string, { svgIcon: string; title: string; cssClass: string }>;\r\n}\r\n\r\nexport const defaultConfig: Config = {\r\n    blockCssClass: 'markdown-alert',\r\n    titleCssClass: 'markdown-alert-title',\r\n    types: {\r\n        '[!NOTE]': {\r\n            // MIT License - Copyright (c) 2023 GitHub Inc. <https://github.com/primer/octicons>\r\n            svgIcon:\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z\"/></svg>',\r\n            title: 'Note',\r\n            cssClass: 'markdown-alert-type-note'\r\n        },\r\n        '[!IMPORTANT]': {\r\n            // MIT License - Copyright (c) 2023 GitHub Inc. <https://github.com/primer/octicons>\r\n            svgIcon:\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"/></svg>',\r\n            title: 'Important',\r\n            cssClass: 'markdown-alert-type-important'\r\n        },\r\n        '[!WARNING]': {\r\n            // MIT License - Copyright (c) 2023 GitHub Inc. <https://github.com/primer/octicons>\r\n            svgIcon:\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"/></svg>',\r\n            title: 'Warning',\r\n            cssClass: 'markdown-alert-type-warning'\r\n        }\r\n    }\r\n};\r\n","// Copyright (C) myl7\r\n// SPDX-License-Identifier: Apache-2.0\r\n// https://github.com/myl7/remark-github-beta-blockquote-admonitions/blob/c1833a503f4766cb4e1342bdf91322b7bc023412/src/index.ts\r\n// Changes made:\r\n// - Replaced the config with a new one that is compatible with this plugin.\r\n// - Admonitions cannot be nested.\r\n// - Added a icon to the title.\r\n\r\nimport type { Blockquote, Html, Paragraph, Text } from 'mdast';\r\nimport type { Plugin } from 'unified';\r\nimport type { BuildVisitor } from 'unist-util-visit';\r\nimport { visit } from 'unist-util-visit';\r\n\r\nimport { Config, defaultConfig } from '../config';\r\n\r\nconst remarkGfmBlockquoteAdmonitionsPlugin: Plugin = () => {\r\n    return (tree: any) => {\r\n        visit(tree, processNode(defaultConfig));\r\n    };\r\n};\r\n\r\nexport default remarkGfmBlockquoteAdmonitionsPlugin;\r\n\r\nconst processNode = (config: Config): BuildVisitor => {\r\n    return (node, _index, parent: import('unist').Node | undefined) => {\r\n        if (node.type != 'blockquote') {\r\n            return;\r\n        }\r\n        if (parent && parent.type == 'blockquote') {\r\n            return;\r\n        }\r\n\r\n        const blockquote = node as Blockquote;\r\n        if (blockquote.children[0]?.type != 'paragraph') {\r\n            return;\r\n        }\r\n\r\n        const paragraph = blockquote.children[0];\r\n        if (paragraph.children[0]?.type != 'text') {\r\n            return;\r\n        }\r\n\r\n        const text = paragraph.children[0];\r\n        const titleEnd = text.value.indexOf('\\n');\r\n        if (titleEnd < 0) {\r\n            return;\r\n        }\r\n\r\n        const textBody = text.value.substring(titleEnd + 1);\r\n        let title = text.value.substring(0, titleEnd);\r\n        // https://github.github.com/gfm/#whitespace-character\r\n        const whitespaceCharacter = /[ \\t\\v\\f\\r]+$/.exec(title);\r\n        if (whitespaceCharacter) {\r\n            title = title.substring(0, title.length - whitespaceCharacter[0].length);\r\n        }\r\n\r\n        const admonitionType = config.types[title];\r\n        if (!admonitionType) {\r\n            return;\r\n        }\r\n\r\n        text.value = textBody;\r\n\r\n        const paragraphTitleText: Text = {\r\n            value: admonitionType.title,\r\n            type: 'text'\r\n        };\r\n        const paragraphIcon: Html = {\r\n            type: 'html',\r\n            value: `<span class='icon'>${admonitionType.svgIcon}</span>`\r\n        };\r\n\r\n        const paragraphTitle: Paragraph = {\r\n            type: 'paragraph',\r\n            children: [paragraphIcon, paragraphTitleText],\r\n            data: { hProperties: { className: config.titleCssClass } }\r\n        };\r\n        blockquote.children.unshift(paragraphTitle);\r\n\r\n        blockquote.data = {\r\n            ...blockquote.data,\r\n            hProperties: { className: `${config.blockCssClass} ${admonitionType.cssClass}` },\r\n            hName: 'div'\r\n        };\r\n    };\r\n};\r\n","import { markdownRenderer } from 'inkdrop';\nimport remarkGfmBlockquoteAdmonitionsPlugin from './remark-gfm-blockquote-admonitions';\n\nclass GfmBlockquoteAdmonitions {\n    activate = async () => {\n        if (markdownRenderer) {\n            markdownRenderer.remarkPlugins.push(remarkGfmBlockquoteAdmonitionsPlugin);\n        }\n    };\n\n    deactivate = async () => {\n        if (markdownRenderer) {\n            markdownRenderer.remarkPlugins = markdownRenderer.remarkPlugins.filter((plugin) => remarkGfmBlockquoteAdmonitionsPlugin !== plugin);\n        }\n    };\n}\n\nconst plugin = new GfmBlockquoteAdmonitions();\n\nmodule.exports = {\n    config: {},\n    activate() {\n        plugin.activate();\n    },\n    deactivate() {\n        plugin.deactivate();\n    }\n};\n"],"names":["convert","test","undefined","ok","typeFactory","Array","isArray","anyFactory","propsFactory","castFactory","Error","tests","checks","index","length","any","parameters","call","check","all","node","key","type","assertion","Boolean","color","d","CONTINUE","EXIT","SKIP","visitParents","tree","visitor","reverse","is","step","factory","parents","value","name","tagName","Object","defineProperty","visit","result","subresult","offset","grandparents","toResult","children","concat","overload","parent","indexOf","markdownRenderer"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}